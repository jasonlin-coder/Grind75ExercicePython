#295FindMedianfromDataStream(2024092402)
import heapq
class MedianFinder(object):

    def __init__(self):
        #a min heap that stores larger half of the stream
        self.largeHalf = []
        #a max heap that stores smaller half of the stream with minus sign to simulate a max heap
        self.smallHalf = []

    def addNum(self, num):
        """
        :type num: int
        :rtype: None
        """
        heapq.heappush(self.largeHalf, num)
        #if self.largeHalf and self.smallHalf and self.largeHalf[0] < -self.smallHalf[0]:
        heapq.heappush(self.smallHalf, -heapq.heappop(self.largeHalf))
        if len(self.largeHalf) < len(self.smallHalf) :
            heapq.heappush(self.largeHalf, -heapq.heappop(self.smallHalf))
    def findMedian(self):
        """
        :rtype: float
        """
        
        
        if len(self.largeHalf) > len(self.smallHalf):
            return self.largeHalf[0]
        return (self.largeHalf[0] - self.smallHalf[0]) / 2.0


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()