#297SerializeandDeserializeBinaryTree(20240911)
from collections import deque
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        if not root:
            return 'null'
        result = []
        nodes = deque([root])
        
        while nodes:
            current = nodes.popleft()
            
            if current:
                result.append(str(current.val))
                nodes.append(current.left)
                nodes.append(current.right)
                    
            else:
                result.append('null')
                
        return ','.join(result)


    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        if  data == 'null':
            return None
        values = data.split(',')
        lenValues = len(values)
        root = TreeNode(int(values[0]))
        nodes = deque([root])
        
        i = 1
        while nodes:
            current = nodes.popleft()
            if i < lenValues:
                if values[i] != 'null':
                   
                    left = TreeNode( int(values[i]))
                    current.left = left
                    nodes.append(left)
                i += 1
            if i < lenValues:
                if values[i] != 'null':
                   
                    right = TreeNode( int(values[i]))
                    current.right = right
                    nodes.append(right)
                i += 1
        return root
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
